Lanzamos el servidor con: mongo --version
Hay que abrir dos terminales

  01 Introducción
  Concepto de documento en MongoDB
  3 ventajas
     - Correspondencia con tipos nativos (objetos JS)
     - Los arrays o documentos embebidos reducen
       la necesidad de JOINS
  
  Esquemas dinámicos permiten polimorfismo
  
  Quitar la estructura de datos a la B.de datos
  
  BSON (JSON Binario)
  - Velocidad de lectura
  - Amplia tipos de JSON
  Limites
   doc BSON  < 16 megabytes
   docs anidados < 100 niveles
   
   Documentos, Colecciones y Bases de Datos
   Registro      <==> Documento
   Tabla         <==> Colección
   Base de Datos <==> Base de Datos
      - Vistas de solo lectura
      - Vistas On-demand (4.2)
   campo _id
   Todos los docs tendrán el campo _id y será único a nivel de colección
   
   - Si el campo _id no es especificado
     cuando se inserta un doc, Mongo DB lo añade
     como un tipo ObjectId.
   - La mayoria de los driver crean el _id
     como ObjectId si no se especifica
   
   Restricciones de _id
   - El _id es inmutable
   - Puede ser cualquier tipo incluido un documento excepto un array, en primer nivel
   
   - El _id es único a nivel de colección
   
   EJ:
        _id:{
                dni:.......
                ciudad:....
            }
   SHELL
   
   Se arranca con el comando mongo
   mongo --host direccion.com --port <nº port>
   (si omitimos localhost y 27017)
    con seguridad
    
    mongo --username <usuario>
          --password <contraseña>
          --authentication Database <nombre>
          --host <dirección>
          --port <nº puerto>
          
    Si omites la contraseña pregunta luego
    
    Mongo añade una 's'                 Caso de Mongus
    Ej: usuario a usuarios
    
    Identicadores de colección deben
    cumplir reglas de JavaScript
    
    La Shell interpreta JavaScript
    - Formato salida pantalla
         - Por defecto a un cursor de 20 documentos,
           iterable con el comando it
         - printjson (variable) permite devolver la colección completa
         - pretty()
         
    JSON no soporta el undefined
    
    Comprobación de tipos
       - typeof
       - instanceof
    Ayudas
    Ayuda de conexión
    mongo --help
    Ayuda genérica
       help
       db.help()
       db.coleccion.help()
       db.metodo
    Referencia en doc
    
    02 Storage
       MMAPv1 (eliminado en 4.2)
       WiredTiger (desde 3.2 defecto)
       InMemory (Versión Enterprise)
       
    03 Operaciones CRUD
       Método insert()
       Sintaxis
       db.<coleccion>.insert(
                              <documento ó array de documentos>,
                              {
                                 writeConcern:<documento>,
                                 ordered:<boolean>
                              }
                             )
     Crea la colección si no existe
     Crea _id si no se especifica para cada documento
     Si se especifica _id debe ser único
     
     Metodo insertOne()
     Síntaxis
     db.<coleccion>.insertOne(
                                <documento>,
                                {
                                  writeConcern:<documento>
                                }
                             )
   
      Metodo insertMany()
      Sintaxis
      db.<coleccion>.insertMany(
                                <array de documentos>,
                                {
                                  writeConcern:<documento>,
                                  ordered:<boolean>
                                }
                               )
      1.- Inserción de datos
      
      Método save()
      Sintaxis
         db.<coleccion>.save(
                              <documento>,
                              {writeConcern:<documento>}
                            )
      
      Comportamiento
         - Si incluye _id y existe ejecutar una operación de actualización
         - Si incluye _id y no existe ejecuta una inserción
         - Si no incluye _id ejecuta una inserción
      
      Operaciones de lectura (Consulta)
      Metodo find()
           db.<coleccion>.find()
           
      Especificar una condición de igualdad
      Sintaxis
      {<campo>:<valor>,...}
      - Cuando haya más de un par la coma que los separa implica un AND implicito.
      - En el caso de _id el valor debe ser ObjectId()
      {<campo>:{$<operador>:<valor>}}
      
      Especificar condiciones OR
      {$or: [{<campo1>:<valor>,...}
             {<campo2>:<valor>,...}
             .....
            ]
      }
      
      db.clientes.find ({_id:ObjectId("5e2ed686.....")})
      db.clientes.find ({$or:[{nombre:"José"},
                              {edad:{$gte:40}}]})
      
      Especificar tanto AND como OR
      {
        <campo1>:<valor>,
        $or:[
              {<campo2>:<valor>,....}
              {<campo3>:<valor>,....}
              ....
             ]
      }
      
      Consultas en documentos embebidos
      {<campo>:<subdocumento>}
      >db.clientes.insert({nombre:"Luis",apellidos:"Gonzalez",
                          direccion:{calle:"Alcalá, 90",
                          localidad:"Madrid"}})
      
      Consultas en campos de documentos embebidos
      {"<campo>.<camposubd>":<valor>}
      db.clientes.find({"dirección.localidad":"Madrid"})
      
      Consulta de igualdad en array
      - Exige igualdad exacta en el array
        incluyendo el orden de los elementos
      
      Consulta de un elemento en array
      {<campo>:<elemento>}
      - Devuelve los documentos
      > db.clientes.find({actividades:"esgrima"})
      
      Consulta de múltiples condiciones en array
      {<campo>:{condiciones}}
      - Devuelve los documentos que en el array
        tengan elementos y cumplan las condiciones
       
      Consulta de un elemento que cumple multiples condiciones
      {<campo>:{$elemMatch:{condiciones}}}
      - Devuelve los doc. que tengan al menos
        un elemento que cumpla todas las condiciones
        
      CICLO DE PRODUCCIÓN CON LÓGICA DE ESTE ESTILO
      
      Consulta de array con índice
      {"<campo>.indice":<valor>}
        -i sería entero del índice del array
      
      Consulta de campos en array de documentos en cualquier posición
      {"<campo>.<campodoc>":<valor>}
      
      Consulta de campos en arrays de documentos en una posición determinada
      {"<campo>.i.<campodoc>":<valor>}
      
      Múltiples condiciones en array de documentos
      {<campo>:{$elemMatch: {condiciones}}}
      
      Múltiples condiciones en array de documentos con uno o varios documentos
      {
        "<campo>.<campodoc>":<valor>,
        ....
      }
      >db.monitores.find({"actividades.clase":"aerobic","actividades.turno":"mañana"})Ç
      Proyección de todos los campos de los documentos seleccionados.
      Devolver los campos especificados y el campo _id
      {campo1: 1, campo2: 1,.....}
      
      Si no tiene un campo de los dos introducidos
      también te lo devuelve.
                               _____________________________________________________
      
      Exclusión del campo _id
      {...,_id:0,...}
      También
      >db.clientes.find({},{nombre:true, apellidos:true, _id:false})
      
      Devolver todos menos los que excluyamos
      {campo1: 0, campo2:0,....}
      Devolución de campos de documentos embebidos
      {...,"<campo>.<campodoc>":1,....}
      Devolución de elementos especificos de un array
      
      Proyección de campos
      - {},{<campo>:1} para incluir
      - {},{<campo>:0} para excluir
      - No se puede incluir y excluir en el mismo doc. de proy. salvo el campo _id.
     
     Consultas para valores null ó campos inexistentes
     Filtro igualdad
     {<campo>:null}
     - Devuelve tanto los documentos con el campo valor null como que no tengan el campo
     
     Comprobación de tipos
     {<campo>:{$type:<numero>}}
     Tipo 10 es null
     
     Comprobación de tipos
     {<campo>:{$type:<numero | string>}}
     donde numero|string del tipo de dato BSON
     
     Comprobación de existencia
     
