Lanzamos el servidor con: mongo --version
Hay que abrir dos terminales

  01 Introducción
  Concepto de documento en MongoDB
  3 ventajas
     - Correspondencia con tipos nativos (objetos JS)
     - Los arrays o documentos embebidos reducen
       la necesidad de JOINS
  
  Esquemas dinámicos permiten polimorfismo
  
  Quitar la estructura de datos a la B.de datos
  
  BSON (JSON Binario)
  - Velocidad de lectura
  - Amplia tipos de JSON
  Limites
   doc BSON  < 16 megabytes
   docs anidados < 100 niveles
   
   Documentos, Colecciones y Bases de Datos
   Registro      <==> Documento
   Tabla         <==> Colección
   Base de Datos <==> Base de Datos
      - Vistas de solo lectura
      - Vistas On-demand (4.2)
   campo _id
   Todos los docs tendrán el campo _id y será único a nivel de colección
   
   - Si el campo _id no es especificado
     cuando se inserta un doc, Mongo DB lo añade
     como un tipo ObjectId.
   - La mayoria de los driver crean el _id
     como ObjectId si no se especifica
   
   Restricciones de _id
   - El _id es inmutable
   - Puede ser cualquier tipo incluido un documento excepto un array, en primer nivel
   
   - El _id es único a nivel de colección
   
   EJ:
        _id:{
                dni:.......
                ciudad:....
            }
   SHELL
   
   Se arranca con el comando mongo
   mongo --host direccion.com --port <nº port>
   (si omitimos localhost y 27017)
    con seguridad
    
    mongo --username <usuario>
          --password <contraseña>
          --authentication Database <nombre>
          --host <dirección>
          --port <nº puerto>
          
    Si omites la contraseña pregunta luego
    
    Mongo añade una 's'                 Caso de Mongus
    Ej: usuario a usuarios
    
    Identicadores de colección deben
    cumplir reglas de JavaScript
    
    La Shell interpreta JavaScript
    - Formato salida pantalla
         - Por defecto a un cursor de 20 documentos,
           iterable con el comando it
         - printjson (variable) permite devolver la colección completa
         - pretty()
         
    JSON no soporta el undefined
    
    Comprobación de tipos
       - typeof
       - instanceof
    Ayudas
    Ayuda de conexión
    mongo --help
    Ayuda genérica
       help
       db.help()
       db.coleccion.help()
       db.metodo
    Referencia en doc
    
    02 Storage
       MMAPv1 (eliminado en 4.2)
       WiredTiger (desde 3.2 defecto)
       InMemory (Versión Enterprise)
       
    03 Operaciones CRUD
       Método insert()
       Sintaxis
       db.<coleccion>.insert(
                              <documento ó array de documentos>,
                              {
                                 writeConcern:<documento>,
                                 ordered:<boolean>
                              }
                             )
     Crea la colección si no existe
     Crea _id si no se especifica para cada documento
     Si se especifica _id debe ser único
     
     Metodo insertOne()
     Síntaxis
     db.<coleccion>.insertOne(
                                <documento>,
                                {
                                  writeConcern:<documento>
                                }
                             )
   
      Metodo insertMany()
      Sintaxis
      db.<coleccion>.insertMany(
                                <array de documentos>,
                                {
                                  writeConcern:<documento>,
                                  ordered:<boolean>
                                }
                               )
      1.- Inserción de datos
      
      Método save()
      Sintaxis
         db.<coleccion>.save(
                              <documento>,
                              {writeConcern:<documento>}
                            )
      
      Comportamiento
         - Si incluye _id y existe ejecutar una operación de actualización
         - Si incluye _id y no existe ejecuta una inserción
         - Si no incluye _id ejecuta una inserción
      
      Operaciones de lectura (Consulta)
      Metodo find()
           db.<coleccion>.find()
           
      Especificar una condición de igualdad
      Sintaxis
      {<campo>:<valor>,...}
      - Cuando haya más de un par la coma que los separa implica un AND implicito.
      - En el caso de _id el valor debe ser ObjectId()
      {<campo>:{$<operador>:<valor>}}
      
      Especificar condiciones OR
      {$or: [{<campo1>:<valor>,...}
             {<campo2>:<valor>,...}
             .....
            ]
      }
      
      db.clientes.find ({_id:ObjectId("5e2ed686.....")})
      db.clientes.find ({$or:[{nombre:"José"},
                              {edad:{$gte:40}}]})
      
      Especificar tanto AND como OR
      {
        <campo1>:<valor>,
        $or:[
              {<campo2>:<valor>,....}
              {<campo3>:<valor>,....}
              ....
             ]
      }
      
      Consultas en documentos embebidos
      {<campo>:<subdocumento>}
      >db.clientes.insert({nombre:"Luis",apellidos:"Gonzalez",
                          direccion:{calle:"Alcalá, 90",
                          localidad:"Madrid"}})
      
      Consultas en campos de documentos embebidos
      {"<campo>.<camposubd>":<valor>}
      db.clientes.find({"dirección.localidad":"Madrid"})
      
      Consulta de igualdad en array
      - Exige igualdad exacta en el array
        incluyendo el orden de los elementos
      
      Consulta de un elemento en array
      {<campo>:<elemento>}
      - Devuelve los documentos
      > db.clientes.find({actividades:"esgrima"})
      
      Consulta de múltiples condiciones en array
      {<campo>:{condiciones}}
      - Devuelve los documentos que en el array
        tengan elementos y cumplan las condiciones
       
      Consulta de un elemento que cumple multiples condiciones
      {<campo>:{$elemMatch:{condiciones}}}
      - Devuelve los doc. que tengan al menos
        un elemento que cumpla todas las condiciones
        
      CICLO DE PRODUCCIÓN CON LÓGICA DE ESTE ESTILO
      
      Consulta de array con índice
      {"<campo>.indice":<valor>}
        -i sería entero del índice del array
      
      Consulta de campos en array de documentos en cualquier posición
      {"<campo>.<campodoc>":<valor>}
      
      Consulta de campos en arrays de documentos en una posición determinada
      {"<campo>.i.<campodoc>":<valor>}
      
      Múltiples condiciones en array de documentos
      {<campo>:{$elemMatch: {condiciones}}}
      
      Múltiples condiciones en array de documentos con uno o varios documentos
      {
        "<campo>.<campodoc>":<valor>,
        ....
      }
      >db.monitores.find({"actividades.clase":"aerobic","actividades.turno":"mañana"})Ç
      Proyección de todos los campos de los documentos seleccionados.
      Devolver los campos especificados y el campo _id
      {campo1: 1, campo2: 1,.....}
      
      Si no tiene un campo de los dos introducidos
      también te lo devuelve.
                               _____________________________________________________
      
      Exclusión del campo _id
      {...,_id:0,...}
      También
      >db.clientes.find({},{nombre:true, apellidos:true, _id:false})
      
      Devolver todos menos los que excluyamos
      {campo1: 0, campo2:0,....}
      Devolución de campos de documentos embebidos
      {...,"<campo>.<campodoc>":1,....}
      Devolución de elementos especificos de un array
      
      Proyección de campos
      - {},{<campo>:1} para incluir
      - {},{<campo>:0} para excluir
      - No se puede incluir y excluir en el mismo doc. de proy. salvo el campo _id.
     
     Consultas para valores null ó campos inexistentes
     Filtro igualdad
     {<campo>:null}
     - Devuelve tanto los documentos con el campo valor null como que no tengan el campo
     
     Comprobación de tipos
     {<campo>:{$type:<numero>}}
     Tipo 10 es null
     
     Comprobación de tipos
     {<campo>:{$type:<numero | string>}}
     donde numero|string del tipo de dato BSON
     
     Comprobación de existencia
     {<campo>:{$exists:<boolean>}}
     
     Método findOne()
     db.<coleccion>.findOne(
                              <documento_consulta>,
                              <documento_proyección>
                           )
     ODM PARA RELACIONAR JAVASCRIPT CON LA BASE DE DATOS
     
     Métodos adicionales de lectura
     Etapa $match de agregación
     
     Operadores Comparación
     $gte $gt $lte $lt
     
     $eq
     Operador de igualdad
     {<campo>:{$eq:<valor>}}
     Operador de no igualdad
     {<campo>:{$ne:<valor>}}
     
     MONGO DB VENDRIA A SER COMO UN LENGUAJE DE MÉTODOS QUE UTILIZA JAVASCRIPT
     
     $in
     {<campo>:{$in:[<valor>,....]}}
     
     Devuelve los documentos que incluyen alguno de los valores contenidos en el array
     $all
     {<campo>:{$all:[<valor>,....]}}
        - Devuelve los documentos que incluyen al menos todos los valores contenidos en el array
     $nin
     Operadores lógicos
     $and
     {$and:[<expresion>,<expresion>,...]}
     db.clientes.find({$and:[{clases:}$nin:["pesas","esgrima"]}},{clases: {$exists:true}}]}
     $or
     {$or:[<expresion>,<expresion>,....]
     $not
     {$not: <expresion>}
     $nor
     {$nor: [<expresion>,<expresion>]}
     
     EJERCICIO: COMERCIO ELECTRÓNICO Y CONVERTIRLO EN RED SOCIAL
     Trabajando con APIs en ANGULAR por ejemplo.
     EJ: BURGER KING
     
     Operadores de evaluación
     $regex (PCRE)
     {<campo>:{$regex: /patron/,
               $options: <options>
              }}
              
     {<campo>:{$regex: "patron",
               $options: <options>
              }}
              
     {<campo>:{$regex: /patron/,
               $options: <options>
              }}        
              
    >db.interesados.insert({nombre:"Pedro",apellidos:"Gutiérrez López"})
    >db.interesados.find({apellidos:{$regex: /G/}})
     Muestra todos los interesados con apellido que comienza con G
     Con el acento circumplejo no lo busca
     Sin acento busca en cualquier parte
                               ___________________________________________
                               
    db.interesados.find({apellidos:{$regex:/^gu/i}})
      Muestra por indexacción el documento (registro)
    db.interesados.find({apellidos:{$regex:/^gu}})
    
    La x omite los espacios en blanco
    Opciones
       i Case insensitive
       x Omite espacios en blanco
       m Identifica saltos
       s Omite saltos añadiendo .* al patrón
    
    db.interesados.find(apellidos:{$regex: "Gó",$options:"m"}})
    $comment
    Añadir comentarios
    
    Operadores de proyección
    $(projection)
    db.<collection>.find({<array>:<valor>},
                          {"<array>.$":1}
                        )
    En el archivo .dbshell guarda la información de lo que hayas mandado.
    
    $slice (proyección)
    {<array>:{$slice:<contador>})
       - Contador positivo los n primeros
       - Contador negativo los n últimos
       - array [skip,limit]
    
    Operaciones de actualización
    Metodo update()
    db.<colección>.update(
              <consulta>,
              <actualizacion>,
              <opciones>
              )
    Actualización completa de un registro
    db.<coleccion>.update(
               <doc-consulta>,
               <doc-completo-sin-_id>
             )
    Operadores de actualización
    $set
    {$set:{<campo>:<valor>,....}}
    - Si el campo no existe lo crea
    
    Opciones upsert (update|insert)
    Si no encuentra un registro en las condiciones de consulta lo crea.
            Si no existe lo crea
            Si existe lo modifica
    $setOnInsert
    {$setOnInsert:{<campo>:<valor>,.....}}
       - Si no encuentra registros a actualizar
         realiza una inserción pero si los encuentran no hace nada.
    
    $unset
    {$unset:{<campo>:true}}
    
    $inc
    {$inc:{<campo>:cantidad,....}}
                     _______________________________________________
    trigger preinsert postinsert
    Desarrollador no es lo mismo que Administrador
    
    - Cuanto dinero me gasto en mis equipos y si realmente merece la pena.
    
    $mul
    {$mul: {<campo>:cantidad,....}
    $rename
    {$rename :{<campo>:<nuevo-nombre>,....}
    $update
    {"<array>.$":<valor>}
    - Cambia el valor del elemento seleccionado en la consulta
    $[identificador]
    {"<array>.$[identificador]":<valor>}
    - Cambia el valor en todos los elementos identificados del array
    {arrayFilters:[
                    {<identificador>:<condicion>}
                  ]}
    __________________________________________________________________________
    db = db.getSiblingDB("gimnasio");
    Devuelve a db la Base de Datos biblioteca
    
    C:\Users\manana\mongo localhost:27017 main.js
    Para enviar lo que hayy en main.js a la base de datos gimnasio
    
    main.js está en Visual Studio Code en el disco duro no en pendrive
    Otro método
    >load ("main.js")
    true
    >db.interesados.find()
    
    C:\Users\manana
    >mongo localhost:27017/biblioteca main.js
    $addToSet
    {$addToSet:{<campo>:<valor>}}
    - Añade el valor a un array salvo que el valor que existe.
    $each
    {$each:[<campo>:<valor>,...]}
       [1,2,3]
       [1,2,3,[4,5]]
    - Añade los elementos de un array a otro array de uno en uno
    $pop
    {$pop :{<campo>:<-1|1>,....}}
       -1 borra el primer elemento
        1 borra el último elemento
    $pull
    {$pull:{<campo>:<condicion>,....}}
      - Eliminar todos los elementos del array que cumplan la condición
      - Si se le pasa como condición un array de valores habia que  usar
        $in para tratarlos de manera individual.
    $pullAll 
        direcciones:[
                     {calle:"tal",loc:""}
                     { ................ }
                    ]
         Array de documentos
    pull -[valores]-$in-valor- elimina todos
    pullAll - [valores]- valor- elimina todos
    
    $pullAll
       -idem pull
       - No es necesario usar $in para tratarlos de manera individual
    $push
    {$push:{<campo>:<valor>}}
    $sort:1
      Ordena en orden ascendente
      - Añade elementos al final del array
      - Usa $each en el caso de añadir un array de elementos de manera individual
      - Puede usar $sort 1|-1 (siempre con $each)
      - Puede usar $slice para limitar un elemento de array
     
    $slice:-3
                         each[] sort:1 slice
        -n ultimos
        +n ultimos
      - Puede usar $position para añadir los elementos en una posición determinada.
      
      n(indexado a cero)
      Métodos updateOne()
      Actualiza solo el primer elementoque encuentra
      db.<colección>.updateOne(
              {doc consulta},
              {doc actualización},
              {doc opciones}
             )
    Método updateMany()
    - Actualiza todos los registros que encuentre+
    
    db.libros.updateMany(
                    {},
                    {$set:{modificadoEn: new Date()},})
                   )
   >for (i=0;i<100;i++){
        db.foo.insert({_id:i,a:1})
      }
   >db.foo.find().count()
   
   Métodos adicionales de actualización
   
   replaceOne()
   findOneAndReplace()
   findOneAndUpdate()
   findAndModify()
   save()

   bulkwrite()
   Operaciones de borrado
   Método remove()
   db.<coleccion>.remove(
                        {documento consulta},
                        {documento opciones}
                       )
   >db.foo.remove({})
     - Borrar todos pasar doc consulta vacio
     - Si se elimina todos los doc. la colección sigue existiendo
   >db.libros.remove({autor:/John/})
   >db.libros.remove({autor:/Gabriel/},{justOne:true})
   
   Método deleteOne()
   db.<coleccion>.deleteOne(
                      {doc.consulta},               Sin posibilidad de poner justOne          
                      {doc.opciones}
                     )
   Método deleteMany()
   db.<coleccion>.deleteMany(
                       {doc.consulta}
                       {doc.opciones}
                      )
  
    Métodos adicionales de borrado
       findOneAndDelete()
       findAndModify()
       bulkWrite()
       
    Método bulkWrite()
    db.<coleccion>.bulkWrite(
                      [
                         {documento-operacion},
                         {documento-operacion}
                         .......
                      ],
                      {documento-opciones}
                    )
    Operaciones soportadas
    insertOne
    updateOne
    updateMany
    replaceOne
    deleteOne
    deleteMany
    
    >db.libros.bulkWrite([
                  {insertOne:{
                   document:{
                   titulo:"El Sr de los Anillos", autor:"Tolkien"}}},
                  {updateOne:{
                              filter:{autor:/El Quijote/},
                              update:{$set:{pais:"España"})
                   }}])
                   
     ordered: true   ->   Ejecuta de manera ordenada
     ordered: false
     
     Métodos de cursores
     next() y hasNext()
       - Pasamos una operación a una variable (no puede ser global)
       - Iteramos toda la variable (sin el limite de 20 documentos que tienen los cursores por defecto) con hasNext()
         para comprobar y next() paa imprimir y pasar al siguiente.
     ________________________________________________________________________________
     clientes = db.clientes.find()
     while (clientes.hasNext()){
                      printjson(clientes.next())
                  }
     _________________________________________________________________________________
     registros = db.foo2.find()
     
     Método count()
     db.<coleccion>.find({consulta})
     db.<coleccion>.count()
     
     Método limit
       db.clientes.find().limit(5)
     Método skip()
       // Para saltar
       db.clientes.find().skip(5).limit(5)
     Método sort
     db.<coleccion>.find().sort(
                        {<campo>: 1 | -1...}
                       )
     Método distinct()
     Devuelve los valores distintos de un campo
     db.<coleccion>.distinct()
     db.clientes.distinct("apellidos") (
                              "<campo>"
                              {documento-consulta},
                              {opciones}
                            )
     db.clientes.distinct("apellidos",{nombre:"Juan"})
     
     Método collation()
     db.<coleccion>.find().collation(
                              <documento-opciones>
                             )
     Introducir en las consultas un criterio de la consulta.
     Para la parte de busqueda en string.
     Identifica mediante un criterio MAYUSCULAS, MINUSCULAS Y ACRITICOS (Acentos,diéresis,Ç,etc)
     
     locale: <pais> * Obligatorio
        - Establecer condiciones de orden de la busqueda en función del lenguaje.
     BSON en UTF8
     
     locale: <codigo_pais>* Obligatorio
     strength:1 // Ignora diacríticos y mayus/minus.
     
     db.interesados.find({apellidoso:"López"}).collation({locale:"es",strength:1})
    
     strength:2 // Solo ignora DIACRITICOS
     strength:3 // Tiene en cuenta diacríticos y mayus/minusc
     caseLevel: <boolean>  //defecto false-true con strength 1 a solo diacríticos
                            - true con strength 2 se convierte en strength 3
     caseFirst: <upper> | <lower>
         - "upper" ordena primero las mayusculas
         - "lower" ordena primero las minusculas
     db.interesados.find({apellidos: "Garcia"}).sort({apellidos:1}).colletion({locale:"es",strength:1,caseFirst:"lower"})
     
     numericOrdering
     Método createCollection()
     createCollection(
                 "<nombre-collección>"
                 {documento opciones}
                )
     -collation: {documento}
     
     
